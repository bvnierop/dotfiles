* Introduction
Write something here.
** TODO Put everything in one org file
See [[https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/][this example config]].
* init.el
This section contains the original init.el, with comments, changed to my own
liking. It contains one big ~doom!~ block enabling and disabling the basic
modules that I use.
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       (lsp +eglot)               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       (csharp +dotnet +lsp +tree-sitter)            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       (fsharp +lsp)            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       (nix +tree-sitter)               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +roam2)               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web +lsp +tree-sitter)               ; the tubes
       ;;yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings))
       ;; (default +bindings +smartparens))
#+end_src
* packages.el
This section contains the original packages.el with comments and changed to my
own liking.
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/radian-software/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see radian-software/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)



(package! eglot-fsharp :pin "b4d31c3da018cfbb3d1f9e6fd416d8777f0835bd")
(package! fsharp-mode :pin "b4d31c3da018cfbb3d1f9e6fd416d8777f0835bd")
(package! eglot :pin "d95c95141be94f7c8435ae334d1ddf2d61804eed")

;; Please pretty please with sugar on top: no "jk" to escape insert mode.
;; In Dutch, this is a common combination of keys.
(package! evil-escape :disable t)

(package! feature-mode)
#+end_src
** TODO Split out the custom config
* Original config.el
This is the original config.el from Doom emacs. It's kept here in order to be
able to look things up.
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Bart van Nierop"
      user-mail-address "mail@bvnierop.nl")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

* config.el
** Quality of Life
I don't like my editor closing braces for me except for very specific cases.
We'll disable smartparens. How to do this is described in the [[https://discourse.doomemacs.org/t/disable-smartparens-or-parenthesis-completion/134][docs]].
#+begin_src emacs-lisp
(remove-hook 'doom-first-buffer-hook #'smartparens-global-mode)
#+end_src

*** TODO Set up leader / localleader
I'm not really sure that I like ~SPC m~ as localleader. I would prefer a single
key. In vim there are two open keys: ~\~ and ~SPC~. In Doom, ~\~ is taken, but I
may remap that. Another option is to use ~,~ as localleader.

** TODO Take many things from my native config
** TODO Language support
*** TODO C#
I have enabled C# lang mode in init.el, but there is config to be done / copied
from my old config, as well as in the current lang module. I may overwrite the
existing module, but if I can work from post-config, than that may be better.

Here's what needs to be done.

1. Add some config to csharp-mode-tree-sitter
2. Extract and publish eglot-csharp to github (or install with nix)
3. Evil-style bindings
4. Add LSP/eglot support to csharp-mode-tree-sitter

#+begin_src emacs-lisp
(use-package! csharp-tree-sitter
  :hook '(csharp-tree-sitter-mode . rainbow-delimiters-mode)
  :config
  ;; tree-sitter-indent is broken for csharp
  (add-hook! 'csharp-tree-sitter-mode (tree-sitter-indent-mode -1))

  ;; (set-electric! 'csharp-tree-sitter-mode :chars '(?\n ?\}))
  (set-rotate-patterns! 'csharp-tree-sitter-mode
                        :symbols '(("public" "protected" "private")
                                   ("class" "struct" "record")))
  (set-ligatures! 'csharp-tree-sitter-mode
                  ;; Functional
                  :lambda        "() =>"
                  ;; Types
                  :null          "null"
                  :true          "true"
                  :false         "false"
                  :int           "int"
                  :float         "float"
                  :str           "string"
                  :bool          "bool"
                  :list          "List"
                  ;; Flow
                  :not           "!"
                  :in            "in"
                  :and           "&&"
                  :or            "||"
                  :for           "for"
                  :return        "return"
                  :yield         "yield")

  (sp-local-pair 'csharp-tree-sitter-mode "<" ">"
                 :when '(+csharp-sp-point-in-type-p)
                 :post-handlers '(("| " "SPC")))

  ;; Setup LSP
  (when (modulep! :lang csharp +lsp)
    (add-hook! 'csharp-tree-sitter-mode-local-vars-hook #'lsp! 'append)
    (after! eglot
      (add-to-list 'eglot-server-programs `(csharp-tree-sitter-mode "OmniSharp" "-lsp" "-v")))))

;;   (defadvice! +csharp-disable-clear-string-fences-a (fn &rest args)
;;     "This turns off `c-clear-string-fences' for `csharp-mode'. When
;; on for `csharp-mode' font lock breaks after an interpolated string
;; or terminating simple string."
;;     :around #'csharp-disable-clear-string-fences
;;     (unless (eq major-mode 'csharp-tree-sitter-mode)
;;       (apply fn args))))
#+end_src

*** TODO F#
#+begin_src emacs-lisp
(use-package! fsharp-mode
  :config
  (use-package! eglot-fsharp
    :config
    (when (modulep! :lang fsharp +lsp)
      (require 'eglot-fsharp)
      (setq eglot-fsharp-server-args '("--adaptive-lsp-server-enabled" "--verbose"))
      (add-hook! 'fsharp--mode-local-vars-hook #'lsp! 'append))))
#+end_src
*** TODO TypeScript [0/3]
Typescript support is mostly built-in in Doom, but requires some extra setup.
Mainly to work with React.js / tsx. Here's a short TODO list.

- [ ] Add typescript langserver to nix config
- [ ] Add typescript langserver as eglot lsp server to typescript-tsx-mode
- [ ] Automagically start eglot when opening a tsx or ts file

These probably have to be added as additions to the ~web~ module, as that is
where React support is added.
** TODO Software support
*** Org mode
**** General things
We want some configuration of org-mode, because some of the defaults suck.
We start by setting the maximum text width to 80 columns.
#+begin_src emacs-lisp
(use-package! org
  :config
  (add-hook! org-mode
    (setq fill-column 80)
    (auto-fill-mode t)))
#+end_src

We'll also make it start nicer, with correct indentation, better source code
highlighting and start folded.

#+begin_src emacs-lisp
(use-package! org
  :config
  (setq org-startup-indented  t
        org-src-fontify-natively t
        org-startup-folded t))
#+end_src

I don't like Emacs' default tab handling, so I've changed it. Because of that,
we also need to change org's tab handling.

#+begin_src emacs-lisp
(use-package! org
  :config
  (setq org-src-tab-acts-natively nil))
#+end_src

Finally I want slightly nicer key bindings for storing links and opening
agenda from org files.

#+begin_src emacs-lisp
(map!
 :mode org-mode
 :prefix "C-c"
 "a" #'org-agenda
 "l" #'org-store-link)
#+end_src

Formatting code blocks in org-mode is... finicky. We'll build our own formatting
function for code blocks.

#+begin_src emacs-lisp
(defun bvn/org-mode-indent-source ()
  (interactive)
  (org-edit-special)
  (evil-indent (point-min) (point-max))
  (org-edit-src-exit))

(map! :localleader
      :mode org-mode
      "=" #'bvn/org-mode-indent-source)
#+end_src

**** org-protocol
I use org-protocol, so it needs to be set up.
#+begin_src emacs-lisp
(use-package! org
  :config (require 'org-protocol))
#+end_src

org-protocol is amazing for capturing things such as interesting websites to
read. Unfortunately, org-capture doesn't quite behave the way I want it to in
combination with org-protocol. Specifically it hardcodes where the buffer should
be placed, rather than using ~display-buffer~. This is annoying for several
reasons, but in this case I am only interested in the org-protocol case.

My desktop application wrapper assigns a name to the frame in which I'm
capturing with org-protocol. We check for that name when toggling
~org-capture-mode~ and if it matches we kill all other windows, forcing the
capture one to take the entire frame.

#+begin_src emacs-lisp
(use-package! org
  :config
  (require 'org-protocol)

  (defvar org-protocol-capture-nest-level 0
    "Tracks capture level depth in org-protocol captures.")

  (add-hook! 'org-capture-mode-hook
             :depth -99
             (cl-incf org-protocol-capture-nest-level))

  (add-hook! 'org-capture-after-finalize-hook
             :depth -99
             (cl-decf org-protocol-capture-nest-level))

  (cl-defmacro bvn/in-org-protocol-capture-frame (&body body)
    (let ((frame-name (cl-gensym "frame-name-")))
      `(let ((,frame-name (substring-no-properties
                           (cdr (assoc 'name (frame-parameters))))))
         (when (string-prefix-p "org-protocol-capture" ,frame-name)
           ,@body))))

  (add-hook! 'doom-switch-window-hook
    (bvn/in-org-protocol-capture-frame
     (when (and (string= "*doom*" (buffer-name (current-buffer)))
                (> (count-windows) 1))
       (delete-window (get-buffer-window "*doom*")))))

  (add-hook! 'doom-switch-buffer-hook
    (bvn/in-org-protocol-capture-frame
     (when (and (string= "*doom*" (buffer-name (current-buffer)))
                (> (count-windows) 1))
       (delete-window (get-buffer-window "*doom*")))))

  (add-hook! 'doom-after-init-hook :append
    (set-popup-rule! "^\\*Capture\\*$\\|CAPTURE-.*$" :ignore t)
    (+popup-cleanup-rules-h))

  (add-hook! 'org-capture-after-finalize-hook
    (interactive)
    (bvn/in-org-protocol-capture-frame
     (when (zerop org-protocol-capture-nest-level)
       (delete-frame)))))
#+end_src

*** TODO Org-roam
#+begin_src emacs-lisp
(use-package! org-roam
  ;; :straight (:files (:defaults "extensions/*"))
  :init (setq org-roam-v2-ack t)
  :hook (after-init . org-roam-db-autosync-mode)
  :custom
  (org-roam-directory "~/.org-roam")
  (org-roam-db-location "~/.org-roam/org-roam.db")
  (org-roam-v2-ack t)
  (org-roam-capture-templates
   '(("d" "default" plain "%?"
      :target (file+head "%<%Y%m%d%H%M%S-%N>.org"
                         "#+title: ${title}\n")
      :unnarrowed t))) ;; Remove the slug from the default file name, to prevent file name changing

  (org-roam-capture-ref-templates
   '(("r" "ref" plain "%?"
      :target (file+head "%<%Y%m%d%H%M%S-%N>.org"
                         "#+title: ${title}")
      :unnarrowed t)))
  :config
  (require 'org-roam-protocol))

;; TODO Map keybindings to leader
(after! org-roam
  (map!
   :map global-map
   :prefix "C-c n"
   "n" #'org-roam-buffer-toggle
   "f"  #'org-roam-node-find
   "g"  #'org-roam-graph
   "d d"  #'org-roam-dailies-goto-today
   "d p"  #'org-roam-dailies-goto-previous-note
   "d n"  #'org-roam-dailies-goto-next-note
   "d y"  #'org-roam-dailies-goto-yesterday)

  (map!
   :map org-mode-map
   :prefix "C-c n"
   "i"  #'org-roam-node-insert
   "I"  #'org-roam-insert-immediate
   "n"  #'org-roam-buffer-toggle
   "n"  #'org-roam-buffer-toggle
   "f"  #'org-roam-node-find
   "g"  #'org-roam-graph
   "d d"  #'org-roam-dailies-goto-today
   "d y"  #'org-roam-dailies-goto-yesterday))
#+end_src
**** TODO Migrate roam config to a more doom-like style
[[https://docs.doomemacs.org/v21.12/modules/lang/org/][See the docs]]
